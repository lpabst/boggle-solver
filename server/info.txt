dictionary word count by length:
{ 
  '3': 834,
  '4': 5013,
  '5': 12915,
  '6': 26129,
  '7': 38148,
  '8': 48062,
  '9': 49406,
  '10': 42994,
  '11': 35670,
  '12': 27884,
  '13': 20227,
  '14': 13819,
  '15': 8678,
  '16': 5144,
  'longer': 5845,
}



  letter combination counts by length:
  { 
    '1': 16,
    '2': 84,
    '3': 408,
    '4': 1764,
    '5': 6712,
    '6': 22672,
    '7': 68272,
    '8': 183472,
    '9': 436984,
    '10': 905776,
    '11': 1594648,
    '12': 2310264,
    '13': 2644520,
    '14': 2250192,
    '15': 1260672,
    '16': 343184,
    longer: 0,
    'total': 12029640,
  }

- This is how many times we check the dictionary for each length basically. There are 12,029,640 ways to combine the Boggle cubes, so we will check the dictionary that many times. We need our longer words to be the most efficient (13 is the peak). The lower lengths aren't as big of a deal.




TESTS
Tests that return more words take longer in general i.e. including lots of Z, X, and Q characters makes it run faster.

letter set: abomtaniionsrpla (3 letters per nested array, 3 levels deep)
  7, 10, 16 = 1, 2, 3 levels deep
    12 limit = 3038 ms 
    14 limit = 6500 ms 
    16 limit = 7600 ms 
  6, 9, 16 = 1, 2, 3 levels deep 
    12 = 3174
    14 = 6555
    16 = 7700 ms 

7 and under = 3975 subarrays
10 and under = 3032 subarrays with 61810 subarrays total
16 and under = 2115, 29103, 62686 total nested


letter set: abomtaniionsrpla (2 letters per nested array, 4 levels deep)
  - Speed tests are about as the same as the 3X3 tests above, possibly even a little slower, so I'm not going to nest any deeper than this
5 and under = 389 subarrays 
8 and under = 371, 18052
11 and under = 302, 11680, 49563
16 and under = 253, 5870, 20719, 37338
